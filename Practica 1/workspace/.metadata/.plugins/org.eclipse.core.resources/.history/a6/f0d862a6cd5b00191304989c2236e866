/*package AguileraBalderas;

import core.game.StateObservation;
import core.player.AbstractPlayer;
import ontology.Types;
import tools.ElapsedCpuTimer;
import java.util.Random;

public class Agent extends AbstractPlayer{

	public Agent(StateObservation stateObs, ElapsedCpuTimer elapsedTimer) {
		
	}
	
	public void init(StateObservation stateObs, ElapsedCpuTimer elapsedTimer) {
		
	}
	
	public Types.ACTIONS act(StateObservation stateObs, ElapsedCpuTimer elapsedTimer){
		Random aleatorio = new Random(System.currentTimeMillis());
		while(true) {
			int intAleatorio = aleatorio.nextInt(4);
			switch (intAleatorio) {
			case 0:
				return Types.ACTIONS.ACTION_LEFT;
			case 1:
				return Types.ACTIONS.ACTION_RIGHT;
			case 2:
				return Types.ACTIONS.ACTION_UP;
			case 3:
				return Types.ACTIONS.ACTION_DOWN;
			default:
				break;
			}
		}
	}
	
}*/
package AguileraBalderas;

import core.game.Observation;
import java.util.concurrent.ThreadLocalRandom;
import core.game.StateObservation;
import core.player.AbstractPlayer;
import ontology.Types;
import ontology.Types.ACTIONS;
import tools.ElapsedCpuTimer;
import tools.Vector2d;
import tools.pathfinder.Node;
import tools.pathfinder.PathFinder;

import java.util.concurrent.ThreadLocalRandom;

import AguileraBalderas.ResolutorTareas;

import javax.swing.*;

import java.util.ArrayList;
import java.util.HashMap;

public class Agent extends AbstractPlayer {
    //Objeto de clase Pathfinder
    private PathFinder pf;
    private int fescalaX;
    private int fescalaY;
    
    private ArrayList<Types.ACTIONS> lista_acciones;
    private ArrayList<Gema> lista_gemas_faciles;
    
    private ResolutorTareas resolutor;
    
    private boolean acabado;
    
    int alto, ancho;
    
    ArrayList<Vector2di> puntos_huida;
    int fila_portal, col_portal;
    int fila_inicial, col_inicial;
    
    boolean escapando;
    
    int veces_escapadas;
    boolean yendo_por_piedra = true;
    
    int bloqueado = 0;
    Gema gema_objetivo = null;
    int col_anterior, fila_anterior;
    
        
    
    private int distanciaManhattan(int fila1, int col1, int fila2, int col2) {
		return Math.abs(fila1-fila2) + Math.abs(col1 - col2);
	}
    
    public Agent(StateObservation stateObs, ElapsedCpuTimer elapsedTimer) {
    	veces_escapadas=0;
    	escapando=false;
    	acabado = false;
    	yendo_por_piedra = false;
 	
    	lista_acciones = new ArrayList<Types.ACTIONS>();
        //Creamos una lista de IDs de obstaculos
        ArrayList<Integer> tiposObs = new ArrayList();
        tiposObs.add(0); //<- Muros
        tiposObs.add(7); //<- Piedras

        //Se inicializa el objeto del pathfinder con las ids de los obstaculos
        pf = new PathFinder(tiposObs);
        pf.VERBOSE = false; // <- Activa o desactiva el modo la impresión del log

        //Se lanza el algoritmo de pathfinding para poder ser usado en la función ACT
        pf.run(stateObs);

        this.fescalaX = stateObs.getWorldDimension().width / stateObs.getObservationGrid().length;
        this.fescalaY = stateObs.getWorldDimension().height / stateObs.getObservationGrid()[0].length;
        
        lista_gemas_faciles = new ArrayList<Gema>();
        /*lista_gemas_faciles.add(new Vector2di(1,4));
        lista_gemas_faciles.add(new Vector2di(7,9));
        lista_gemas_faciles.add(new Vector2di(9,10));
        lista_gemas_faciles.add(new Vector2di(16,9));
        lista_gemas_faciles.add(new Vector2di(18,9));
        lista_gemas_faciles.add(new Vector2di(20,3));
        lista_gemas_faciles.add(new Vector2di(23,6));
        lista_gemas_faciles.add(new Vector2di(23,7));
        lista_gemas_faciles.add(new Vector2di(24,6));
        lista_gemas_faciles.add(new Vector2di(24,7));*/
        
        lista_gemas_faciles = obtenListaGemasFaciles(stateObs,elapsedTimer);
        gema_objetivo = lista_gemas_faciles.get(0);
        
        resolutor = new ResolutorTareas(stateObs.getObservationGrid(), stateObs.getObservationGrid().length, stateObs.getObservationGrid()[0].length,stateObs, this.fescalaX, this.fescalaY);
        
        ancho = stateObs.getObservationGrid().length;
        alto = stateObs.getObservationGrid()[0].length;
        ArrayList<Observation>[][] mundo = stateObs.getObservationGrid();
        
        
        ArrayList<Vector2di> posiciones_accesibles = new ArrayList<Vector2di>();
        for(int i=0; i < ancho;++i)
        	for(int j = 0; j < alto; j++) {
        		resolutor.reset();
        		resolutor.setParametros(stateObs);
        		if(isAccesible(mundo, i, j)) {
	        		if(resolutor.obtenCamino(i, j, elapsedTimer, true, false).get(0)!=Types.ACTIONS.ACTION_NIL)
	        			posiciones_accesibles.add(new Vector2di(i,j));
        		}
        	}
        
        
        puntos_huida = new ArrayList<Vector2di>();
        
        col_portal = (int) Math.round(stateObs.getPortalsPositions()[0].get(0).position.x / this.fescalaX);
    	fila_portal = (int) Math.round(stateObs.getPortalsPositions()[0].get(0).position.y / this.fescalaY);
    	
    	col_inicial = (int) Math.round(stateObs.getAvatarPosition().x / this.fescalaX);
    	fila_inicial = (int) Math.round(stateObs.getAvatarPosition().y / this.fescalaY);
    	
    	puntos_huida.add(new Vector2di(col_inicial, fila_inicial));
    	puntos_huida.add(new Vector2di(col_portal, fila_portal));
    	
    	Vector2di max_dist = posiciones_accesibles.get(0);
        for(Vector2di pos : posiciones_accesibles) {
        	if(distanciaManhattan(max_dist.x, max_dist.y, col_inicial, fila_inicial)<distanciaManhattan(pos.x, pos.y, col_inicial, fila_inicial))
        		if(distanciaManhattan(max_dist.x, max_dist.y, col_portal, fila_portal)<distanciaManhattan(pos.x, pos.y, col_portal, fila_portal))
        			max_dist = pos;
        }
        puntos_huida.add(new Vector2di(max_dist.x, max_dist.y));
    	
    	for(int i = 0; i < 3; ++i) {
    		int n = ThreadLocalRandom.current().nextInt(0, posiciones_accesibles.size());
	    	puntos_huida.add(posiciones_accesibles.get(n));
    	}
    }


    private ArrayList<Gema> obtenListaGemasFaciles(StateObservation stateObs, ElapsedCpuTimer timer) {
    	int col_actual = (int) Math.round(stateObs.getAvatarPosition().x / this.fescalaX);
    	int fila_actual = (int) Math.round(stateObs.getAvatarPosition().y / this.fescalaY);
    	ArrayList<Observation>[][] mundo = stateObs.getObservationGrid();
		ResolutorTareas resolutor_aux = new ResolutorTareas(mundo, mundo.length, mundo[0].length, stateObs, fescalaX, fescalaY);
		ArrayList<Gema> gemas_faciles = new ArrayList<Gema>();
		ArrayList<Gema> gemas = new ArrayList<Gema>();
		
		ArrayList<Observation>[] posiciones_gemas = stateObs.getResourcesPositions();
		for(Observation o : posiciones_gemas[0]) {
			Gema gema = new Gema();
			gema.coordenadas.x = (int) Math.round(o.position.x / fescalaX);
			gema.coordenadas.y = (int) Math.round(o.position.y / fescalaY);
			gemas.add(gema);
		}
		ArrayList<Gema> gemas9 = new ArrayList<Gema>();
		while(gemas.size()>0) {
			gemas_faciles = new ArrayList<Gema>();
			for(Gema gema : gemas) {
				resolutor_aux.reset();
				resolutor_aux.setParametros(stateObs);
				for(int j = 0; j < 20; j++) {
					if(resolutor_aux.obtenCamino(gema.coordenadas.x, gema.coordenadas.y, timer,true, true).get(0)!=Types.ACTIONS.ACTION_NIL) {
						gema.distancia_actual = resolutor_aux.cantidad_pasos;
						gema.mira_piedras=true;
						gemas_faciles.add(gema);
					}
				}
			}
			if(gemas_faciles.size()>0) {
				Gema min = gemas_faciles.get(0);
				for(int j = 1; j<gemas_faciles.size();j++) {
					if(gemas_faciles.get(j).distancia_actual < min.distancia_actual)
						min = gemas_faciles.get(j);
				}
				gemas.remove(min);
				gemas9.add(min);
				col_actual = gemas9.get(gemas9.size()-1).coordenadas.x;
				fila_actual = gemas9.get(gemas9.size()-1).coordenadas.y;
			}
			else
				return gemas9;
			
		}
		return gemas9;
    }
		
		private ArrayList<Gema> obtenListaGemaFacil(StateObservation stateObs, ElapsedCpuTimer timer) {
	    	int col_actual = (int) Math.round(stateObs.getAvatarPosition().x / this.fescalaX);
	    	int fila_actual = (int) Math.round(stateObs.getAvatarPosition().y / this.fescalaY);
	    	ArrayList<Observation>[][] mundo = stateObs.getObservationGrid();
			ResolutorTareas resolutor_aux = new ResolutorTareas(mundo, mundo.length, mundo[0].length, stateObs, fescalaX, fescalaY);
			ArrayList<Gema> gemas_faciles = new ArrayList<Gema>();
			ArrayList<Gema> gemas = new ArrayList<Gema>();
			
			ArrayList<Observation>[] posiciones_gemas = stateObs.getResourcesPositions(new Vector2d(col_inicial, fila_inicial));
			for(Observation o : posiciones_gemas[0]) {
				Gema gema = new Gema();
				gema.coordenadas.x = (int) Math.round(o.position.x / fescalaX);
				gema.coordenadas.y = (int) Math.round(o.position.y / fescalaY);
				gemas.add(gema);
			}
			ArrayList<Gema> gemas9 = new ArrayList<Gema>();
			gemas_faciles = new ArrayList<Gema>();
			for(Gema gema : gemas) {
				resolutor_aux.reset();
				resolutor_aux.setParametros(stateObs);
				for(int j = 0; j < 5; j++) {
					if(resolutor_aux.obtenCamino(gema.coordenadas.x, gema.coordenadas.y, timer,false, false).get(0)!=Types.ACTIONS.ACTION_NIL) {
						gema.mira_piedras=false;
						gemas9.add(gema);
						return gemas9;
					}
				}
			}
			
		return gemas9;
	}
    
	@Override
    public Types.ACTIONS act(StateObservation stateObs, ElapsedCpuTimer elapsedTimer){
		//return Types.ACTIONS.ACTION_NIL;
    	int col_start = (int) Math.round(stateObs.getAvatarPosition().x / fescalaX);
    	int fila_start = (int) Math.round(stateObs.getAvatarPosition().y / fescalaY);
    	ArrayList<Observation>[][] mundo = stateObs.getObservationGrid();
    	
    	//System.out.println(lista_acciones.toString());
    
    	resolutor.setParametros(stateObs);
    	if(lista_gemas_faciles.size()>0)
	    	if(gema_objetivo.equals(lista_gemas_faciles.get(0)) || (col_start==col_anterior) && (fila_start==fila_anterior))
	    		bloqueado+=1;
	    	else {
	    		gema_objetivo = lista_gemas_faciles.get(0);
	    		bloqueado=0;
	    	}
    	col_anterior = col_start;
    	fila_anterior = fila_start;
    	
    	if(bloqueado>50) {
    		escapando=false;
    		ArrayList<Gema> gema_facil = obtenListaGemaFacil(stateObs,elapsedTimer);
    		if(gema_facil.size()>0) {
	    		for(int i = 0; i < lista_gemas_faciles.size();++i)
	    			if(lista_gemas_faciles.get(i).equals(gema_facil.get(0)))
	    				lista_gemas_faciles.remove(i);
	    		lista_gemas_faciles.add(0, gema_facil.get(0));
    		}
    	}
    		
    	
    	if(stateObs.getAvatarResources().size()>0)
    		if(stateObs.getAvatarResources().get(6)==9)
    			acabado=true;
    	
    	if(lista_acciones.size()==0) {
    		resolutor.reset();
    		escapando=false;
    		yendo_por_piedra = false;
    	}
    	if(lista_gemas_faciles.size()==0 && !acabado) {
    		lista_gemas_faciles = obtenListaGemasFaciles(stateObs,elapsedTimer);
    	}
    	
    	if(lista_gemas_faciles.size()==0 && !yendo_por_piedra) {
    		resolutor.reset();
    		if(stateObs.getAvatarResources().size()>0) {
	    		if(stateObs.getAvatarResources().get(6)<9) {
	    			acabado = false;
	    			
	    			ArrayList<Observation>[] piedras = stateObs.getMovablePositions(/*new Vector2d(col_start,fila_start)*/);
	    			int n =(int) Math.round((Math.random()+1)*100);
	    			int col_piedra =(int) Math.round(piedras[0].get(n%piedras[0].size()).position.x)/fescalaX;
	    			int fil_piedra = (int) Math.round(piedras[0].get(n%piedras[0].size()).position.y)/fescalaY;
	    			if(fila_start != fil_piedra+1) {
		    			if(isAccesible(mundo, col_piedra-1, fil_piedra+1)) {
		    				lista_acciones = resolutor.obtenCamino(col_piedra-1, fil_piedra+1, elapsedTimer, true, false);
		    				lista_acciones.addAll(resolutor.moverPiedra(col_piedra-1,fil_piedra+1,col_piedra, fil_piedra));
		    				yendo_por_piedra = true;
		    			}
		    			else if(isAccesible(mundo, col_piedra+1, fil_piedra+1)) {
		    				lista_acciones = resolutor.obtenCamino(col_piedra+1, fil_piedra+1, elapsedTimer, true, false);
		    				lista_acciones.addAll(resolutor.moverPiedra(col_piedra+1,fil_piedra+1,col_piedra, fil_piedra));
		    				yendo_por_piedra = true;
		    			}
	    			}
	    		}
	    		else	
	    			acabado=true;
    		}
		}
    	if(lista_acciones.size()==0 && lista_gemas_faciles.size()>0 && !acabado) {
    		if(col_start != lista_gemas_faciles.get(0).coordenadas.x || fila_start != lista_gemas_faciles.get(0).coordenadas.y) {    		
    			lista_acciones = resolutor.obtenCamino(lista_gemas_faciles.get(0).coordenadas.x, lista_gemas_faciles.get(0).coordenadas.y,elapsedTimer,false, lista_gemas_faciles.get(0).mira_piedras);
    			if(lista_acciones.size()==1 && lista_acciones.get(0)==Types.ACTIONS.ACTION_NIL)
    				lista_acciones.remove(0);
    				stateObs.advance(Types.ACTIONS.ACTION_NIL);
    				return Types.ACTIONS.ACTION_NIL;
    		}
    		else {
    			lista_gemas_faciles.remove(0);
    			resolutor.reset();
    		}
    	}
    	if(lista_acciones.size()>0) {
    		if(this.escapando && hayPeligroVecinos(stateObs)) {
    			System.out.println("Huyo de forma reactiva");
    			lista_acciones = escapaReactivo(stateObs, lista_acciones);
    		}
    		else if(hayPeligroBicho(stateObs, lista_acciones)) {
    			System.out.println("Huyo de forma plafinicada");
    			escapando=true;
    			lista_acciones = esquivaBicho(stateObs,lista_acciones, elapsedTimer);
    		}
    		if(lista_acciones.size()==0)
    			return Types.ACTIONS.ACTION_NIL;
	    	Types.ACTIONS accion = lista_acciones.get(0);
	    	stateObs.advance(accion);
	    	lista_acciones.remove(0);
	    	return(accion);
    	}
    	if(acabado) {
    		lista_acciones = resolutor.salirPortal(elapsedTimer);
    	}
    	stateObs.advance(Types.ACTIONS.ACTION_NIL);
    	return Types.ACTIONS.ACTION_NIL;
    	
    }
    
    private boolean hayPeligroVecinos(StateObservation stateObs) {
		ArrayList<Observation>[][] mundo = stateObs.getObservationGrid();
		int col_start = (int) Math.round(stateObs.getAvatarPosition().x / fescalaX);
    	int fila_start = (int) Math.round(stateObs.getAvatarPosition().y / fescalaY);
    	boolean monstruo_alrededores = false;
    	if(fila_start-1>=0)
    		if(mundo[col_start][fila_start-1].size()>0)
    			monstruo_alrededores = monstruo_alrededores || mundo[col_start][fila_start-1].get(0).itype==11 || mundo[col_start][fila_start-1].get(0).itype==10;
    	if(fila_start+1<alto)
    		if(mundo[col_start][fila_start+1].size()>0)
    			monstruo_alrededores = monstruo_alrededores || mundo[col_start][fila_start+1].get(0).itype==11 || mundo[col_start][fila_start+1].get(0).itype==10;
    	if(col_start-1>=0)
    		if(mundo[col_start-1][fila_start].size()>0)
    			monstruo_alrededores = monstruo_alrededores || mundo[col_start-1][fila_start].get(0).itype==11 || mundo[col_start-1][fila_start].get(0).itype==10;
    	if(col_start+1<ancho)
    		if(mundo[col_start+1][fila_start].size()>0)
    			monstruo_alrededores = monstruo_alrededores || mundo[col_start+1][fila_start].get(0).itype==11 || mundo[col_start+1][fila_start].get(0).itype==10;
		return false;
	}

	private ArrayList<ACTIONS> escapaReactivo(StateObservation obs, ArrayList<ACTIONS> lista_acciones2) {
    	ArrayList<Observation>[][] mundo = obs.getObservationGrid();
    	ArrayList<Types.ACTIONS> lista_acciones = new ArrayList<Types.ACTIONS>();
    	int col_start = (int) Math.round(obs.getAvatarPosition().x / fescalaX);
    	int fila_start = (int) Math.round(obs.getAvatarPosition().y / fescalaY);
    	
    	if(lista_acciones2.get(0)==Types.ACTIONS.ACTION_LEFT) {
			if(obs.getAvatarOrientation().x==1.0) {
				if(isAccesible(mundo, col_start+1, fila_start))
					lista_acciones.add(0,Types.ACTIONS.ACTION_RIGHT);
				else if(isAccesible(mundo, col_start, fila_start+1)) {
					lista_acciones.add(0,Types.ACTIONS.ACTION_DOWN);
					lista_acciones.add(0,Types.ACTIONS.ACTION_DOWN);
				}
				else if(isAccesible(mundo, col_start, fila_start-1)) {
					lista_acciones.add(0,Types.ACTIONS.ACTION_UP);
					lista_acciones.add(0,Types.ACTIONS.ACTION_UP);
				}
			}
			else {
				if(isAccesible(mundo, col_start+1, fila_start)) {
					lista_acciones.add(0,Types.ACTIONS.ACTION_RIGHT);
					lista_acciones.add(0,Types.ACTIONS.ACTION_RIGHT);
				}
				else if(isAccesible(mundo, col_start, fila_start+1)) {
					lista_acciones.add(0,Types.ACTIONS.ACTION_DOWN);
					lista_acciones.add(0,Types.ACTIONS.ACTION_DOWN);
				}
				else if(isAccesible(mundo, col_start, fila_start-1)) {
					lista_acciones.add(0,Types.ACTIONS.ACTION_UP);
					lista_acciones.add(0,Types.ACTIONS.ACTION_UP);
				}
			}
    	}
		else if(lista_acciones2.get(0)==Types.ACTIONS.ACTION_RIGHT) {
			if(obs.getAvatarOrientation().x==-1.0) {
				if(isAccesible(mundo, col_start-1, fila_start))
					lista_acciones.add(0,Types.ACTIONS.ACTION_LEFT);	
				else if(isAccesible(mundo, col_start, fila_start-1)) {
					lista_acciones.add(0,Types.ACTIONS.ACTION_UP);
					lista_acciones.add(0,Types.ACTIONS.ACTION_UP);
				}
				else if(isAccesible(mundo, col_start, fila_start+1)) {
					lista_acciones.add(0,Types.ACTIONS.ACTION_DOWN);
					lista_acciones.add(0,Types.ACTIONS.ACTION_DOWN);
				}
			}
			else {
				if(isAccesible(mundo, col_start-1, fila_start)) {
					lista_acciones.add(0,Types.ACTIONS.ACTION_LEFT);
					lista_acciones.add(0,Types.ACTIONS.ACTION_LEFT);
				}
				else if(isAccesible(mundo, col_start, fila_start-1)) {
					lista_acciones.add(0,Types.ACTIONS.ACTION_UP);
					lista_acciones.add(0,Types.ACTIONS.ACTION_UP);
				}
				else if(isAccesible(mundo, col_start, fila_start+1)) {
					lista_acciones.add(0,Types.ACTIONS.ACTION_DOWN);
					lista_acciones.add(0,Types.ACTIONS.ACTION_DOWN);
				}
			}
		}
		else if(lista_acciones2.get(0)==Types.ACTIONS.ACTION_UP) {
			if(obs.getAvatarOrientation().y==1.0) {
				if(isAccesible(mundo, col_start, fila_start+1))
					lista_acciones.add(0,Types.ACTIONS.ACTION_DOWN);
				else if(isAccesible(mundo, col_start-1, fila_start)) {
					lista_acciones.add(0,Types.ACTIONS.ACTION_LEFT);
					lista_acciones.add(0,Types.ACTIONS.ACTION_LEFT);
				}
				else if(isAccesible(mundo, col_start+1, fila_start)) {
					lista_acciones.add(0,Types.ACTIONS.ACTION_RIGHT);
					lista_acciones.add(0,Types.ACTIONS.ACTION_RIGHT);
				}
			}
			else {
				if(isAccesible(mundo, col_start, fila_start+1)) {
					lista_acciones.add(0,Types.ACTIONS.ACTION_DOWN);
					lista_acciones.add(0,Types.ACTIONS.ACTION_DOWN);
				}
				else if(isAccesible(mundo, col_start-1, fila_start)) {
					lista_acciones.add(0,Types.ACTIONS.ACTION_LEFT);
					lista_acciones.add(0,Types.ACTIONS.ACTION_LEFT);
				}
				else if(isAccesible(mundo, col_start+1, fila_start)) {
					lista_acciones.add(0,Types.ACTIONS.ACTION_RIGHT);
					lista_acciones.add(0,Types.ACTIONS.ACTION_RIGHT);
				}
			}
		}
		else {
		//else if(lista_acciones2.get(0)==Types.ACTIONS.ACTION_DOWN) {
			if(obs.getAvatarOrientation().y==-1.0) {
				if(isAccesible(mundo, col_start, fila_start-1))
					lista_acciones.add(0,Types.ACTIONS.ACTION_UP);
				else if(isAccesible(mundo, col_start-1, fila_start)) {
					lista_acciones.add(0,Types.ACTIONS.ACTION_LEFT);
					lista_acciones.add(0,Types.ACTIONS.ACTION_LEFT);
				}
				else if(isAccesible(mundo, col_start+1, fila_start)) {
					lista_acciones.add(0,Types.ACTIONS.ACTION_RIGHT);
					lista_acciones.add(0,Types.ACTIONS.ACTION_RIGHT);
				}
			}
			else {
				if(isAccesible(mundo, col_start, fila_start-1)) {
					lista_acciones.add(0,Types.ACTIONS.ACTION_UP);
					lista_acciones.add(0,Types.ACTIONS.ACTION_UP);
				}	
				else if(isAccesible(mundo, col_start-1, fila_start)) {
					lista_acciones.add(0,Types.ACTIONS.ACTION_LEFT);
					lista_acciones.add(0,Types.ACTIONS.ACTION_LEFT);
				}
				else if(isAccesible(mundo, col_start+1, fila_start)) {
					lista_acciones.add(0,Types.ACTIONS.ACTION_RIGHT);
					lista_acciones.add(0,Types.ACTIONS.ACTION_RIGHT);
				}
			}
		}
	    /*if(lista_acciones.size()>0) {
	    	if(lista_acciones.get(0)==Types.ACTIONS.ACTION_RIGHT){
	    		if(isAccesible(mundo, col_start+1, fila_start-1)) {
		    		lista_acciones.add(Types.ACTIONS.ACTION_UP);
		    		lista_acciones.add(Types.ACTIONS.ACTION_UP);
	    		}
	    	}
	    	else if(lista_acciones.get(0)==Types.ACTIONS.ACTION_UP) {
	    		if(isAccesible(mundo, col_start-1, fila_start-1)) {
	    			lista_acciones.add(Types.ACTIONS.ACTION_LEFT);
	    			lista_acciones.add(Types.ACTIONS.ACTION_LEFT);
	    		}
	    	}
	    	else if(lista_acciones.get(0)==Types.ACTIONS.ACTION_LEFT) {
	    		if(isAccesible(mundo, col_start-1, fila_start+1)) {
					lista_acciones.add(Types.ACTIONS.ACTION_DOWN);
					lista_acciones.add(Types.ACTIONS.ACTION_DOWN);
	    		}
		    }
	    	else {
		    	if(isAccesible(mundo, col_start+1, fila_start-1)) {	
		    		lista_acciones.add(Types.ACTIONS.ACTION_RIGHT);
		    		lista_acciones.add(Types.ACTIONS.ACTION_RIGHT);
		    	}
	    	}
	    }*/
    		
		return lista_acciones;
	}

	private boolean isAccesible(ArrayList<Observation>[][] mundo, int columna, int fila) {
		// Si el nodo está vacío es accesible
		boolean vacio = mundo[columna][fila].size()==0;
		if(!vacio) {
			// Comprueba si hay un bicho
			boolean bicho = mundo[columna][fila].get(0).itype==11 || mundo[columna][fila].get(0).itype==10;
			// Comprueba si hay un muro
			boolean muro = mundo[columna][fila].get(0).itype==0;
			// Comprueba si hay una piedra
			boolean piedra = mundo[columna][fila].get(0).itype==7;
			// Comprueba si la casilla tiene una piedra encima
			boolean piedra_arriba = false;
			if(fila>0 && mundo[columna][fila-1].size()>0)
				piedra_arriba = mundo[columna][fila-1].get(0).itype==7;
			// Comprueba si hay un monstruo arriba, abajo, a la izquierda o a la derecha
			boolean monstruo_alrededores = false;
			if(fila-1>=0)
				if(mundo[columna][fila-1].size()>0)
					monstruo_alrededores = monstruo_alrededores || mundo[columna][fila-1].get(0).itype==11 || mundo[columna][fila-1].get(0).itype==10;
			if(fila+1<alto)
				if(mundo[columna][fila+1].size()>0)
					monstruo_alrededores = monstruo_alrededores || mundo[columna][fila+1].get(0).itype==11 || mundo[columna][fila+1].get(0).itype==10;
			if(columna-1>=0)
				if(mundo[columna-1][fila].size()>0)
					monstruo_alrededores = monstruo_alrededores || mundo[columna-1][fila].get(0).itype==11 || mundo[columna-1][fila].get(0).itype==10;
			if(columna+1<ancho)
				if(mundo[columna+1][fila].size()>0)
					monstruo_alrededores = monstruo_alrededores || mundo[columna+1][fila].get(0).itype==11 || mundo[columna+1][fila].get(0).itype==10;
			// Si no hay un bicho ni un muro ni una piedra ni una piedra encima entonces es una casilla accesible
			boolean condicion = !bicho && !muro && !piedra && !piedra_arriba && !monstruo_alrededores;
			return condicion;
		}
		return true;
	}
    
    // Hay que controlar si la vía de escape está bloqueada para añadir una alternativa
    // Hasta ahora consigue deshacerse del bicho a veces si no se ve atrapado
    private ArrayList<ACTIONS> esquivaBicho(StateObservation obs,ArrayList<ACTIONS> lista_acciones2, ElapsedCpuTimer timer) {
    	this.veces_escapadas+=1;
    	ArrayList<Observation>[][] mundo = obs.getObservationGrid();
    	ArrayList<Types.ACTIONS> lista_acciones = new ArrayList<Types.ACTIONS>();
    	int col_start = (int) Math.round(obs.getAvatarPosition().x / fescalaX);
    	int fila_start = (int) Math.round(obs.getAvatarPosition().y / fescalaY);
    	
    	resolutor.reset();
    	resolutor.setParametros(obs);
    	
    	int pos = 0;
    	
    	for(int i = 0; i<puntos_huida.size();++i) {
    		if(distanciaManhattan(puntos_huida.get(pos).x, puntos_huida.get(pos).y, col_start, fila_start)<distanciaManhattan(puntos_huida.get(i).x, puntos_huida.get(i).y, col_start, fila_start)) {
    			pos = i;
    		}
    	}
    	
    	lista_acciones = resolutor.obtenCamino(puntos_huida.get(pos).x,	puntos_huida.get(pos).y, timer, false, false);
    	
    	
    	/*
    	if(this.veces_escapadas%3==0)
    		lista_acciones = resolutor.obtenCamino(this.col_inicial, this.fila_inicial, timer, false);
    	else if(this.veces_escapadas%2==1)
    		lista_acciones = resolutor.obtenCamino(this.tercer_punto_col, this.tercer_punto_fila, timer, false);
    	else
    		lista_acciones = resolutor.obtenCamino(this.col_portal, this.fila_portal, timer, false);*/
    	return lista_acciones;
	}

	public boolean hayPeligroBicho(StateObservation obs, ArrayList<Types.ACTIONS> lista_acciones) {
    	int col_start = (int) Math.round(obs.getAvatarPosition().x / fescalaX);
    	int fila_start = (int) Math.round(obs.getAvatarPosition().y / fescalaY);
    	/*
    	ArrayList<Observation> [] bichos = obs.getNPCPositions(new Vector2d(col_start, fila_start));
    	
    	// Bucle para escorpiones
    	for(int i = 0; i<bichos[0].size(); i++) {
    		if(distanciaManhattan(fila_start, col_start,(int)Math.round(bichos[0].get(i).position.y)/fescalaY, (int)Math.round(bichos[0].get(i).position.x)/fescalaX) <= 3 
    								&& ! hayBarrera(col_start, fila_start,(int)Math.round(bichos[0].get(i).position.x)/fescalaX,(int)Math.round(bichos[0].get(i).position.y)/fescalaY,obs))
    			return true;
    	}
    	
    	for(int i = 0; i<bichos[1].size(); i++) {
    		if(distanciaManhattan(fila_start, col_start,(int)Math.round(bichos[0].get(i).position.y)/fescalaY, (int)Math.round(bichos[0].get(i).position.x)/fescalaX) <= 3
    				&& ! hayBarrera(col_start, fila_start,(int)Math.round(bichos[0].get(i).position.x)/fescalaX,(int)Math.round(bichos[0].get(i).position.y)/fescalaY,obs))
    			return true;
    	}
    	*/
    	ArrayList<Observation>[][] mundo = obs.getObservationGrid();
    	
    	boolean hay_bicho = false;
    	
    	Types.ACTIONS accion = lista_acciones.get(0);
    	if(accion == Types.ACTIONS.ACTION_DOWN) {
    		ArrayList<Vector2di> posiciones = new ArrayList<Vector2di>();
    		if(fila_start+2>=0 && fila_start+2<ancho)
    			if(mundo[col_start][fila_start+2].size()>0) {
    				if(mundo[col_start][fila_start+2].get(0).itype!=0 && mundo[col_start][fila_start+2].get(0).itype!=7) {	
			    		posiciones.add(new Vector2di(col_start, fila_start+3));
			    		posiciones.add(new Vector2di(col_start, fila_start+2));
			    		posiciones.add(new Vector2di(col_start+1, fila_start+2));
			    		posiciones.add(new Vector2di(col_start-1, fila_start+2));
			    		posiciones.add(new Vector2di(col_start, fila_start+1));
			    		posiciones.add(new Vector2di(col_start-1, fila_start+1));
			    		posiciones.add(new Vector2di(col_start+1, fila_start+1));
			    		
			    		posiciones.add(new Vector2di(col_start-1, fila_start));
			    		posiciones.add(new Vector2di(col_start+1, fila_start));
			    		
			    		posiciones.add(new Vector2di(col_start, fila_start-1));
			    		posiciones.add(new Vector2di(col_start-1, fila_start-1));
			    		posiciones.add(new Vector2di(col_start+1, fila_start-1));
			    		if(col_start+1<ancho)
			    			if(mundo[col_start+1][fila_start].size()>0) {
			    				if(mundo[col_start+1][fila_start].get(0).itype!=7 && mundo[col_start+1][fila_start].get(0).itype!=4 && mundo[col_start+1][fila_start].get(0).itype!=0)
			    					posiciones.add(new Vector2di(col_start+2, fila_start));
			    			}
			    			else
			    				posiciones.add(new Vector2di(col_start+2, fila_start));
			    		
			    		if(col_start-1>=0)
			    			if(mundo[col_start-1][fila_start].size()>0) {
			    				if(mundo[col_start-1][fila_start].get(0).itype!=7 && mundo[col_start-1][fila_start].get(0).itype!=4 && mundo[col_start-1][fila_start].get(0).itype!=0)
			    					posiciones.add(new Vector2di(col_start-2, fila_start));
			    			}
			    			else
			    				posiciones.add(new Vector2di(col_start-2, fila_start));
    				}
    			}
    			else {
    				posiciones.add(new Vector2di(col_start, fila_start+3));
		    		posiciones.add(new Vector2di(col_start, fila_start+2));
		    		posiciones.add(new Vector2di(col_start+1, fila_start+2));
		    		posiciones.add(new Vector2di(col_start-1, fila_start+2));
		    		posiciones.add(new Vector2di(col_start, fila_start+1));
		    		posiciones.add(new Vector2di(col_start-1, fila_start+1));
		    		posiciones.add(new Vector2di(col_start+1, fila_start+1));
		    		
		    		posiciones.add(new Vector2di(col_start-1, fila_start));
		    		posiciones.add(new Vector2di(col_start+1, fila_start));
		    		
		    		posiciones.add(new Vector2di(col_start, fila_start-1));
		    		posiciones.add(new Vector2di(col_start-1, fila_start-1));
		    		posiciones.add(new Vector2di(col_start+1, fila_start-1));
		    		if(col_start+1<ancho)
		    			if(mundo[col_start+1][fila_start].size()>0) {
		    				if(mundo[col_start+1][fila_start].get(0).itype!=7 && mundo[col_start+1][fila_start].get(0).itype!=4 && mundo[col_start+1][fila_start].get(0).itype!=0)
		    					posiciones.add(new Vector2di(col_start+2, fila_start));
		    			}
		    			else
		    				posiciones.add(new Vector2di(col_start+2, fila_start));
		    		
		    		if(col_start-1>=0)
		    			if(mundo[col_start-1][fila_start].size()>0) {
		    				if(mundo[col_start-1][fila_start].get(0).itype!=7 && mundo[col_start-1][fila_start].get(0).itype!=4 && mundo[col_start-1][fila_start].get(0).itype!=0)
		    					posiciones.add(new Vector2di(col_start-2, fila_start));
		    			}
		    			else
		    				posiciones.add(new Vector2di(col_start-2, fila_start));
		    		
    			}
    		if(col_start-1>=0 && col_start-1<ancho && fila_start+1>=0 && fila_start+1<alto)
    			if(mundo[col_start-1][fila_start+1].size()!=0) {
    				if(mundo[col_start-1][fila_start+1].get(0).itype!=0 && mundo[col_start-1][fila_start+1].get(0).itype!=7 && mundo[col_start-1][fila_start+1].get(0).itype!=4)
    					posiciones.add(new Vector2di(col_start-2, fila_start+1));
    			}
    			else
    				posiciones.add(new Vector2di(col_start-2, fila_start+1));
    		if(col_start+1>=0 && col_start+1<ancho && fila_start+1>=0 && fila_start+1<alto)
    			if(mundo[col_start+1][fila_start+1].size()!=0) {
    				if(mundo[col_start+1][fila_start+1].get(0).itype!=0 && mundo[col_start+1][fila_start+1].get(0).itype!=7 && mundo[col_start+1][fila_start+1].get(0).itype!=4)
    					posiciones.add(new Vector2di(col_start+2, fila_start+1));
    			}
    			else
    				posiciones.add(new Vector2di(col_start+2, fila_start+1));
    		//System.out.println("Estamos yendo hacia abajo");
    		for(Vector2di pos : posiciones)
    			if(pos.x>=0 && pos.x<ancho && pos.y>=0 && pos.y<alto)
    				if(mundo[pos.x][pos.y].size()!=0) {
    					hay_bicho = hay_bicho || mundo[pos.x][pos.y].get(0).itype==11 || mundo[pos.x][pos.y].get(0).itype==10;
    					//System.out.println(mundo[pos.x][pos.y].get(0).itype);
    				}
    		//System.out.println(hay_bicho);
    		//System.out.println("\n\n");
    	}
    	else if(accion == Types.ACTIONS.ACTION_UP) {
    		ArrayList<Vector2di> posiciones = new ArrayList<Vector2di>();
    		if(fila_start-2>=0 && fila_start-2<ancho)
    			if(mundo[col_start][fila_start-2].size()>0) {
    				if(mundo[col_start][fila_start-2].get(0).itype!=0 && mundo[col_start][fila_start-2].get(0).itype!=7) {
    					posiciones.add(new Vector2di(col_start, fila_start-3));
    					posiciones.add(new Vector2di(col_start, fila_start-2));
    					posiciones.add(new Vector2di(col_start+1, fila_start-2));
    					posiciones.add(new Vector2di(col_start-1, fila_start-2));
    					posiciones.add(new Vector2di(col_start, fila_start-1));
    					posiciones.add(new Vector2di(col_start-1, fila_start-1));
    					posiciones.add(new Vector2di(col_start+1, fila_start-1));
    					
    					posiciones.add(new Vector2di(col_start-1, fila_start));
			    		posiciones.add(new Vector2di(col_start+1, fila_start));
			    		
			    		posiciones.add(new Vector2di(col_start, fila_start+1));
			    		posiciones.add(new Vector2di(col_start-1, fila_start+1));
			    		posiciones.add(new Vector2di(col_start+1, fila_start+1));
			    		if(col_start+1<ancho)
			    			if(mundo[col_start+1][fila_start].size()>0) {
			    				if(mundo[col_start+1][fila_start].get(0).itype!=7 && mundo[col_start+1][fila_start].get(0).itype!=4 && mundo[col_start+1][fila_start].get(0).itype!=0)
			    					posiciones.add(new Vector2di(col_start+2, fila_start));
			    			}
			    			else
			    				posiciones.add(new Vector2di(col_start+2, fila_start));
			    		
			    		if(col_start-1>=0)
			    			if(mundo[col_start-1][fila_start].size()>0) {
			    				if(mundo[col_start-1][fila_start].get(0).itype!=7 && mundo[col_start-1][fila_start].get(0).itype!=4 && mundo[col_start-1][fila_start].get(0).itype!=0)
			    					posiciones.add(new Vector2di(col_start-2, fila_start));
			    			}
			    			else
			    				posiciones.add(new Vector2di(col_start-2, fila_start));
			    		
    				}
    			}
    			else {
    				posiciones.add(new Vector2di(col_start, fila_start-3));
					posiciones.add(new Vector2di(col_start, fila_start-2));
					posiciones.add(new Vector2di(col_start+1, fila_start-2));
					posiciones.add(new Vector2di(col_start-1, fila_start-2));
					posiciones.add(new Vector2di(col_start, fila_start-1));
					posiciones.add(new Vector2di(col_start-1, fila_start-1));
					posiciones.add(new Vector2di(col_start+1, fila_start-1));
					
					posiciones.add(new Vector2di(col_start-1, fila_start));
		    		posiciones.add(new Vector2di(col_start+1, fila_start));
		    		
		    		posiciones.add(new Vector2di(col_start, fila_start+1));
		    		posiciones.add(new Vector2di(col_start-1, fila_start+1));
		    		posiciones.add(new Vector2di(col_start+1, fila_start+1));
		    		if(col_start+1<ancho)
		    			if(mundo[col_start+1][fila_start].size()>0) {
		    				if(mundo[col_start+1][fila_start].get(0).itype!=7 && mundo[col_start+1][fila_start].get(0).itype!=4 && mundo[col_start+1][fila_start].get(0).itype!=0)
		    					posiciones.add(new Vector2di(col_start+2, fila_start));
		    			}
		    			else
		    				posiciones.add(new Vector2di(col_start+2, fila_start));
		    		
		    		if(col_start-1>=0)
		    			if(mundo[col_start-1][fila_start].size()>0) {
		    				if(mundo[col_start-1][fila_start].get(0).itype!=7 && mundo[col_start-1][fila_start].get(0).itype!=4 && mundo[col_start-1][fila_start].get(0).itype!=0)
		    					posiciones.add(new Vector2di(col_start-2, fila_start));
		    			}
		    			else
		    				posiciones.add(new Vector2di(col_start-2, fila_start));
		    		
    			}
    		if(col_start-1>=0 && col_start-1<ancho && fila_start-1>=0 && fila_start-1<alto)
    			if(mundo[col_start-1][fila_start-1].size()!=0) {
    				if(mundo[col_start-1][fila_start-1].get(0).itype!=0 && mundo[col_start-1][fila_start-1].get(0).itype!=7 && mundo[col_start-1][fila_start-1].get(0).itype!=4)
    					posiciones.add(new Vector2di(col_start-2, fila_start-1));
    			}
    			else
    				posiciones.add(new Vector2di(col_start-2, fila_start-1));
    		if(col_start+1>=0 && col_start+1<ancho && fila_start-1>=0 && fila_start-1<alto)
    			if(mundo[col_start+1][fila_start-1].size()!=0) {
    				if(mundo[col_start+1][fila_start-1].get(0).itype!=0 && mundo[col_start+1][fila_start-1].get(0).itype!=7 && mundo[col_start+1][fila_start-1].get(0).itype!=7)
    					posiciones.add(new Vector2di(col_start+2, fila_start-1));
    			}
    			else
    				posiciones.add(new Vector2di(col_start+2, fila_start-1));
    		//System.out.println("Estamos yendo hacia arriba");
    		for(Vector2di pos : posiciones)
    			if(pos.x>=0 && pos.x<ancho && pos.y>=0 && pos.y<alto)
    				if(mundo[pos.x][pos.y].size()!=0) {
    					hay_bicho = hay_bicho || mundo[pos.x][pos.y].get(0).itype==11 || mundo[pos.x][pos.y].get(0).itype==10;
    					//System.out.println(mundo[pos.x][pos.y].get(0).itype);
    				}
    		//System.out.println(hay_bicho);
    		//System.out.println("\n\n");
    	}
    	else if(accion == Types.ACTIONS.ACTION_LEFT) {
    		ArrayList<Vector2di> posiciones = new ArrayList<Vector2di>();
    		if(col_start-2>=0 && col_start-2<ancho)
    			if(mundo[col_start-2][fila_start].size()>0) {
    				if(mundo[col_start-2][fila_start].get(0).itype!=0 && mundo[col_start-2][fila_start].get(0).itype!=7) {
			    		posiciones.add(new Vector2di(col_start-3, fila_start));
			    		posiciones.add(new Vector2di(col_start-2, fila_start));
			    		posiciones.add(new Vector2di(col_start-2, fila_start-1));
			    		posiciones.add(new Vector2di(col_start-2, fila_start+1));
			    		posiciones.add(new Vector2di(col_start-1, fila_start));
			    		posiciones.add(new Vector2di(col_start-1, fila_start-1));
			    		posiciones.add(new Vector2di(col_start-1, fila_start+1));
			    		
			    		posiciones.add(new Vector2di(col_start, fila_start+1));
			    		posiciones.add(new Vector2di(col_start, fila_start-1));
			    		
			    		posiciones.add(new Vector2di(col_start+1, fila_start));
			    		posiciones.add(new Vector2di(col_start+1, fila_start+1));
			    		posiciones.add(new Vector2di(col_start+1, fila_start-1));
			    		if(fila_start+1<alto)
			    			if(mundo[col_start][fila_start+1].size()>0) {
			    				if(mundo[col_start][fila_start+1].get(0).itype!=7 && mundo[col_start][fila_start+1].get(0).itype!=4 && mundo[col_start][fila_start+1].get(0).itype!=0)
			    					posiciones.add(new Vector2di(col_start, fila_start+2));
			    			}
			    			else
			    				posiciones.add(new Vector2di(col_start, fila_start+2));
			    		
			    		if(fila_start-1>=0)
			    			if(mundo[col_start][fila_start-1].size()>0) {
			    				if(mundo[col_start][fila_start-1].get(0).itype!=7 && mundo[col_start][fila_start-1].get(0).itype!=4 && mundo[col_start][fila_start-1].get(0).itype!=0)
			    					posiciones.add(new Vector2di(col_start, fila_start-2));
			    			}
			    			else
			    				posiciones.add(new Vector2di(col_start, fila_start-2));
    				}
    			}
    			else {
    				posiciones.add(new Vector2di(col_start-3, fila_start));
		    		posiciones.add(new Vector2di(col_start-2, fila_start));
		    		posiciones.add(new Vector2di(col_start-2, fila_start-1));
		    		posiciones.add(new Vector2di(col_start-2, fila_start+1));
		    		posiciones.add(new Vector2di(col_start-1, fila_start));
		    		posiciones.add(new Vector2di(col_start-1, fila_start-1));
		    		posiciones.add(new Vector2di(col_start-1, fila_start+1));
		    		
		    		posiciones.add(new Vector2di(col_start, fila_start+1));
		    		posiciones.add(new Vector2di(col_start, fila_start-1));
		    		
		    		posiciones.add(new Vector2di(col_start+1, fila_start));
		    		posiciones.add(new Vector2di(col_start+1, fila_start+1));
		    		posiciones.add(new Vector2di(col_start+1, fila_start-1));
		    		if(fila_start+1<alto)
		    			if(mundo[col_start][fila_start+1].size()>0) {
		    				if(mundo[col_start][fila_start+1].get(0).itype!=7 && mundo[col_start][fila_start+1].get(0).itype!=4 && mundo[col_start][fila_start+1].get(0).itype!=0)
		    					posiciones.add(new Vector2di(col_start, fila_start+2));
		    			}
		    			else
		    				posiciones.add(new Vector2di(col_start, fila_start+2));
		    		
		    		if(fila_start-1>=0)
		    			if(mundo[col_start][fila_start-1].size()>0) {
		    				if(mundo[col_start][fila_start-1].get(0).itype!=7 && mundo[col_start][fila_start-1].get(0).itype!=4 && mundo[col_start][fila_start-1].get(0).itype!=0)
		    					posiciones.add(new Vector2di(col_start, fila_start-2));
		    			}
		    			else
		    				posiciones.add(new Vector2di(col_start, fila_start-2));
		    		
    			}
    		if(col_start-1>=0 && col_start-1<ancho && fila_start-1>=0 && fila_start-1<alto)
    			if(mundo[col_start-1][fila_start-1].size()!=0) {
    				if(mundo[col_start-1][fila_start-1].get(0).itype!=0 && mundo[col_start-1][fila_start-1].get(0).itype!=7 && mundo[col_start-1][fila_start-1].get(0).itype!=4)
    					posiciones.add(new Vector2di(col_start-1, fila_start-2));
    			}
    			else
    				posiciones.add(new Vector2di(col_start-1, fila_start-2));
    		if(col_start-1>=0 && col_start-1<ancho && fila_start+1>=0 && fila_start+1<alto)
    			if(mundo[col_start-1][fila_start+1].size()!=0) {
    				if(mundo[col_start-1][fila_start+1].get(0).itype!=0 && mundo[col_start-1][fila_start+1].get(0).itype!=7 && mundo[col_start-1][fila_start+1].get(0).itype!=4)
    					posiciones.add(new Vector2di(col_start-1, fila_start+2));
    			}
    			else
    				posiciones.add(new Vector2di(col_start-1, fila_start+2));
    		//System.out.println("Estamos yendo hacia la izquierda");
    		for(Vector2di pos : posiciones)
    			if(pos.x>=0 && pos.x<ancho && pos.y>=0 && pos.y<alto)
    				if(mundo[pos.x][pos.y].size()!=0) {
    					hay_bicho = hay_bicho || mundo[pos.x][pos.y].get(0).itype==11 || mundo[pos.x][pos.y].get(0).itype==10;
    					//System.out.println(mundo[pos.x][pos.y].get(0).itype);
    				}
    		//System.out.println(hay_bicho);
    		//System.out.println("\n\n");
    	}
    	else if(accion == Types.ACTIONS.ACTION_RIGHT) {
    		ArrayList<Vector2di> posiciones = new ArrayList<Vector2di>();
    		if(col_start+2>=0 && col_start+2<ancho)
    			if(mundo[col_start+2][fila_start].size()>0) {
    				if(mundo[col_start+2][fila_start].get(0).itype!=0 && mundo[col_start+2][fila_start].get(0).itype!=7) {
			    		posiciones.add(new Vector2di(col_start+3, fila_start));
			    		posiciones.add(new Vector2di(col_start+2, fila_start));
			    		posiciones.add(new Vector2di(col_start+2, fila_start-1));
			    		posiciones.add(new Vector2di(col_start+2, fila_start+1));
			    		posiciones.add(new Vector2di(col_start+1, fila_start));
			    		posiciones.add(new Vector2di(col_start+1, fila_start-1));
			    		posiciones.add(new Vector2di(col_start+1, fila_start+1));
			    		
			    		posiciones.add(new Vector2di(col_start, fila_start+1));
			    		posiciones.add(new Vector2di(col_start, fila_start-1));
			    		
			    		posiciones.add(new Vector2di(col_start-1, fila_start));
			    		posiciones.add(new Vector2di(col_start-1, fila_start+1));
			    		posiciones.add(new Vector2di(col_start-1, fila_start-1));
			    		if(fila_start+1<alto)
			    			if(mundo[col_start][fila_start+1].size()>0) {
			    				if(mundo[col_start][fila_start+1].get(0).itype!=7 && mundo[col_start][fila_start+1].get(0).itype!=4 && mundo[col_start][fila_start+1].get(0).itype!=0)
			    					posiciones.add(new Vector2di(col_start, fila_start+2));
			    			}
			    			else
			    				posiciones.add(new Vector2di(col_start, fila_start+2));
			    		
			    		if(fila_start-1>=0)
			    			if(mundo[col_start][fila_start-1].size()>0) {
			    				if(mundo[col_start][fila_start-1].get(0).itype!=7 && mundo[col_start][fila_start-1].get(0).itype!=4 && mundo[col_start][fila_start-1].get(0).itype!=0)
			    					posiciones.add(new Vector2di(col_start, fila_start-2));
			    			}
			    			else
			    				posiciones.add(new Vector2di(col_start, fila_start-2));
			    		
    				}
    			}
    			else {
    				posiciones.add(new Vector2di(col_start+3, fila_start));
		    		posiciones.add(new Vector2di(col_start+2, fila_start));
		    		posiciones.add(new Vector2di(col_start+2, fila_start-1));
		    		posiciones.add(new Vector2di(col_start+2, fila_start+1));
		    		posiciones.add(new Vector2di(col_start+1, fila_start));
		    		posiciones.add(new Vector2di(col_start+1, fila_start-1));
		    		posiciones.add(new Vector2di(col_start+1, fila_start+1));
		    		
		    		posiciones.add(new Vector2di(col_start, fila_start+1));
		    		posiciones.add(new Vector2di(col_start, fila_start-1));
		    		
		    		posiciones.add(new Vector2di(col_start-1, fila_start));
		    		posiciones.add(new Vector2di(col_start-1, fila_start+1));
		    		posiciones.add(new Vector2di(col_start-1, fila_start-1));
		    		if(fila_start+1<alto)
		    			if(mundo[col_start][fila_start+1].size()>0) {
		    				if(mundo[col_start][fila_start+1].get(0).itype!=7 && mundo[col_start][fila_start+1].get(0).itype!=4 && mundo[col_start][fila_start+1].get(0).itype!=0)
		    					posiciones.add(new Vector2di(col_start, fila_start+2));
		    			}
		    			else
		    				posiciones.add(new Vector2di(col_start, fila_start+2));
		    		
		    		if(fila_start-1>=0)
		    			if(mundo[col_start][fila_start-1].size()>0) {
		    				if(mundo[col_start][fila_start-1].get(0).itype!=7 && mundo[col_start][fila_start-1].get(0).itype!=4 && mundo[col_start][fila_start-1].get(0).itype!=0)
		    					posiciones.add(new Vector2di(col_start, fila_start-2));
		    			}
		    			else
		    				posiciones.add(new Vector2di(col_start, fila_start-2));
		    	
    			}
    		if(col_start+1>=0 && col_start+1<ancho && fila_start-1>=0 && fila_start-1<alto)
    			if(mundo[col_start+1][fila_start-1].size()!=0) {
    				if(mundo[col_start+1][fila_start-1].get(0).itype!=0 && mundo[col_start+1][fila_start-1].get(0).itype!=7 && mundo[col_start+1][fila_start-1].get(0).itype!=4)
    					posiciones.add(new Vector2di(col_start+1, fila_start-2));
    			}
    			else
    				posiciones.add(new Vector2di(col_start+1, fila_start-2));
    		if(col_start+1>=0 && col_start+1<ancho && fila_start+1>=0 && fila_start+1<alto)
    			if(mundo[col_start+1][fila_start+1].size()!=0) {
    				if(mundo[col_start+1][fila_start+1].get(0).itype!=0 && mundo[col_start+1][fila_start+1].get(0).itype!=7 && mundo[col_start+1][fila_start+1].get(0).itype!=4)
    					posiciones.add(new Vector2di(col_start+1, fila_start+2));
    			}
    			else
    				posiciones.add(new Vector2di(col_start+1, fila_start+2));
    		//System.out.println("Estamos yendo hacia la derecha");
    		for(Vector2di pos : posiciones)
    			if(pos.x>=0 && pos.x<ancho && pos.y>=0 && pos.y<alto)
    				if(mundo[pos.x][pos.y].size()!=0) {
    					hay_bicho = hay_bicho || mundo[pos.x][pos.y].get(0).itype==11 || mundo[pos.x][pos.y].get(0).itype==10;
    					//System.out.println(mundo[pos.x][pos.y].get(0).itype);
    				}
    		//System.out.println(hay_bicho);
    		//System.out.println("\n\n");
    	}
    	
    	return hay_bicho;
    	//return false;
    }
	/*
	private boolean hayBarrera(int col1, int fil1, int col2, int fil2, StateObservation obs) {
		ArrayList<Observation>[][] mundo = obs.getObservationGrid();
		if(fil1 != fil2) {
			if(Math.abs(fil2 - fil1) == 2)
				if(mundo[col1][(int)(fil2+fil1)/2].size() > 0)
					return (mundo[col1][(int)(fil2+fil1)/2].get(0).itype == 0 /*|| (mundo[col1][(fil2+fil1)/2].get(0).itype == 4 && mundo[col2][(fil2+fil1)/2].get(0).itype == 4)*///);
				/*else
					return false;
			else if(Math.abs(fil2 - fil1) > 2)
				return true;
			else
				return false;
		}
		else {
			if(Math.abs(col2-col1) == 2)
				if(mundo[col1][(int)(fil2+fil1)/2].size() > 0)
					return (mundo[fil1][(int)(col2+col1)/2].get(0).itype == 0 /*|| (mundo[fil1][(col2+col1)/2].get(0).itype == 4 && mundo[fil2][(col2+col1)/2].get(0).itype == 4)*///);
				/*else
					return false;
			else if(Math.abs(col2-col1) > 2)
				return true;
			else 
				return false;
		}
	}*/


}
